name: Deploy to Cloud Run

on:
  push:
    branches: [ "main" ]  

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  REPO: ${{ secrets.GAR_REPO }}
  SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4

      - name: Preflight auth inputs
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ] && { [ -z "${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}" ] || [ -z "${{ secrets.GCP_SERVICE_ACCOUNT }}" ]; }; then
            echo "You must configure either GCP_SA_KEY (JSON) or both GCP_WORKLOAD_IDENTITY_PROVIDER and GCP_SERVICE_ACCOUNT (WIF)." >&2
            exit 1
          fi

      - name: Auth via Service Account JSON
        if: secrets.GCP_SA_KEY
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Auth via Workload Identity Federation
        if: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER && secrets.GCP_SERVICE_ACCOUNT }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - uses: google-github-actions/setup-gcloud@v2

      - name: Set gcloud project
        run: gcloud config set project "$PROJECT_ID"

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker "$REGION-docker.pkg.dev"

      - name: Build and Push
        run: |
          IMAGE="$REGION-docker.pkg.dev/$PROJECT_ID/$REPO/$SERVICE_NAME:${GITHUB_SHA::7}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Get Cloud SQL connection name
        id: sql
        run: |
          CONN_NAME=$(gcloud sql instances describe "${{ secrets.CLOUD_SQL_INSTANCE }}" \
            --project "$PROJECT_ID" --format='value(connectionName)')
          echo "CONN_NAME=$CONN_NAME" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy "$SERVICE_NAME" \
            --image "$IMAGE" \
            --region "$REGION" \
            --platform managed \
            --allow-unauthenticated \
            --set-cloudsql-instances "$CONN_NAME" \
            --set-env-vars "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" \
            --set-env-vars "DEBUG=false,SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" \
            --set-env-vars "DB_ENGINE=postgres,DB_NAME=${{ secrets.DB_NAME }},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_HOST=/cloudsql/$CONN_NAME" \
            --set-env-vars "USE_GCS=${{ secrets.USE_GCS }},GS_BUCKET_NAME=${{ secrets.GS_BUCKET_NAME }}" \
            --set-env-vars "LOG_LEVEL=INFO,WEB_CONCURRENCY=3" \
            --cpu=1 --memory=512Mi --timeout=300

      - name: Bootstrap Users
        run: |
          echo "ðŸ”§ Creating bootstrap users..."
          gcloud run jobs create bootstrap-users-${{ github.run_number }} \
            --image "$IMAGE" \
            --region "$REGION" \
            --set-cloudsql-instances "$CONN_NAME" \
            --set-env-vars "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }},DB_ENGINE=postgres,DB_NAME=${{ secrets.DB_NAME }},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_HOST=/cloudsql/$CONN_NAME" \
            --command python \
            --args "manage.py,bootstrap" \
            --execute-now \
            --wait
          echo "âœ… Bootstrap completed!"
